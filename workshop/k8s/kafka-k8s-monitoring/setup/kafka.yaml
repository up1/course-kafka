apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-jmxtrans-config
data:
  metrics.json: |+
    {"obj": "java.lang:type=Memory", "attr": ["HeapMemoryUsage","NonHeapMemoryUsage"], "resultAlias": "jvmMemory"}
    {"obj": "kafka.server:type=ReplicaManager,name=UnderReplicatedPartitions", "attr": ["Value"], "resultAlias": "UnderReplicatedPartitions"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=MessagesInPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "MessagesInPerSec"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=MessagesInPerSec,topic=*", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "MessagesInPerSecPerTopic"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=BytesInPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "BytesInPerSec"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=BytesInPerSec,topic=*", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "BytesInPerSecPerTopic"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=BytesOutPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "BytesOutPerSec"}
    {"obj": "kafka.server:type=BrokerTopicMetrics,name=BytesOutPerSec,topic=*", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "BytesOutPerSecPerTopic"}
    {"obj": "kafka.server:type=ReplicaManager,name=PartitionCount", "attr": ["Value"], "resultAlias": "PartitionCount"}
    {"obj": "kafka.server:type=ReplicaManager,name=LeaderCount", "attr": ["Value"], "resultAlias": "LeaderCount"}
    {"obj": "kafka.server:type=ReplicaManager,name=IsrShrinksPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "IsrShrinksPerSec"}
    {"obj": "kafka.server:type=ReplicaManager,name=IsrExpandsPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "IsrExpandsPerSec"}
    {"obj": "kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent", "attr": ["MeanRate"], "resultAlias": "RequestHandlerAvgIdlePercent"}
    {"obj": "kafka.controller:type=KafkaController,name=OfflinePartitionsCount", "attr": ["Value"], "resultAlias": "OfflinePartitionsCount"}
    {"obj": "kafka.controller:type=KafkaController,name=ActiveControllerCount", "attr": ["Value"], "resultAlias": "ActiveControllerCount"}
    {"obj": "kafka.controller:type=ControllerStats,name=LeaderElectionRateAndTimeMs", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "LeaderElectionRateAndTimeMs"}
    {"obj": "kafka.controller:type=ControllerStats,name=UncleanLeaderElectionsPerSec", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "UncleanLeaderElectionsPerSec"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestsPerSec,request=Produce", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "ProduceRequestsPerSec"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestsPerSec,request=FetchConsumer", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "FetchConsumerRequestsPerSec"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestsPerSec,request=FetchFollower", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate"], "resultAlias": "FetchFollower"}
    {"obj": "kafka.network:type=RequestMetrics,name=TotalTimeMs,request=Produce", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "ProduceTotalTimeMs"}
    {"obj": "kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchConsumer", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "FetchConsumerTotalTimeMs"}
    {"obj": "kafka.network:type=RequestMetrics,name=TotalTimeMs,request=FetchFollower", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "FetchFollowerTotalTimeMs"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestQueueTimeMs,request=FetchFollower", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "FetchFollowerRequestQueueTimeMs"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestQueueTimeMs,request=FetchConsumer", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "FetchConsumerRequestQueueTimeMs"}
    {"obj": "kafka.network:type=RequestMetrics,name=RequestQueueTimeMs,request=Produce", "attr": ["Count","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "ProduceRequestQueueTimeMs"}
    {"obj": "kafka.log:type=LogFlushStats,name=LogFlushRateAndTimeMs", "attr": ["Count","MeanRate","OneMinuteRate","FiveMinuteRate","FifteenMinuteRate","Min","Max","Mean","StdDev", "50thPercentile","75thPercentile","95thPercentile","98thPercentile","99thPercentile","999thPercentile"], "resultAlias": "LogFlush"}
    {"obj": "kafka.network:type=SocketServer,name=NetworkProcessorAvgIdlePercent", "attr": ["Value"], "resultAlias": "NetworkProcessorAvgIdlePercent"}
    {"obj": "kafka.server:type=FetcherLagMetrics,name=ConsumerLag,clientId=*,topic=*,partition=*", "attr": ["Value"], "resultAlias": "ConsumerLag"}
    {"obj": "kafka.server:type=ProducerRequestPurgatory,name=PurgatorySize", "attr": ["Value"], "resultAlias": "ProducerRequestsPurgatorySize"}
    {"obj": "kafka.server:type=FetchRequestPurgatory,name=PurgatorySize", "attr": ["Value"], "resultAlias": "FetchRequestPurgatorySize"}
  boot.sh: |+
    #!/bin/sh

    set -e
    set -x

    export JMXTRANS_OPTS="$JMXTRANS_OPTS -Dlogback.configurationFile=file:///${JMXTRANS_HOME}/conf/logback.xml -DkafkaJmxPort=$KAFKA_JMX_PORT -Dalias=$POD_NAME -DinfluxUrl=$INFLUXDB_HOST -DinfluxDatabase=$INFLUXDB_DATABASE -DinfluxUser=$INFLUXDB_USER -DinfluxPass=$INFLUXDB_PASSWORD"
    exec java $JAVA_OPTS $JMXTRANS_OPTS -jar $JAR_FILE -e -j $JSON_DIR -s $SECONDS_BETWEEN_RUNS -c $CONTINUE_ON_ERROR

---
# A headless service to create DNS records
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
spec:
  clusterIP: None
  ports:
    - { name: "kafka", port: 9092 }
  selector:
    app: kafka
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kafka
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: kafka
---      
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  labels:
    app: kafka
spec:
  serviceName: kafka
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: jmxtrans-init
        image: realguess/jq:1.4
        volumeMounts:
        - name: kafka-jmxtrans-config
          mountPath: /metrics-input/metrics.json
          subPath: metrics.json
        - name: jmxtrans-input
          mountPath: /jmxtrans-input
        command:
        - sh
        - -c
        - >-
          jq -s -c '{"servers": [{"port": "${kafkaJmxPort}","host":"localhost","alias":"${alias}", "queries":map( {"outputWriters": [{"@class":"com.googlecode.jmxtrans.model.output.InfluxDbWriterFactory","url":"${influxUrl}","database":"${influxDatabase}","createDatabase":false,"username":"${influxUser}","password":"${influxPass}"}], "obj": .obj, "attr": .attr, "resultAlias": .resultAlias})}]}'
          /metrics-input/metrics.json > /jmxtrans-input/kafka.json
      containers:
        - name: kafka
          image: wurstmeister/kafka:2.12-2.3.0
          env:
            - { name: KAFKA_LISTENERS,                      value: "PLAINTEXT://:9092" }
            - { name: HOSTNAME_COMMAND,                     value: "echo $HOSTNAME" }
            - { name: KAFKA_ADVERTISED_LISTENERS,           value: "PLAINTEXT://_{HOSTNAME_COMMAND}.kafka:9092" }
            - { name: BROKER_ID_COMMAND,                    value: "echo ${HOSTNAME##*-}" }
            - { name: KAFKA_HEAP_OPTS,                      value: "-Xms1g -Xmx1g" }
            - { name: KAFKA_ZOOKEEPER_CONNECT,              value: "zookeeper" }
            - { name: KAFKA_JMX_OPTS,                       value: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dcom.sun.management.jmxremote.rmi.port=9010" }
            - { name: JMX_PORT,                             value: "9010" }
          resources:
            requests: { memory: "1Gi" }
            limits:   { memory: "1Gi" }
          ports:
            - { name: jmx-port, containerPort: 9010, protocol: TCP }
            - { name: broker-port, containerPort: 9092, protocol: TCP }
          readinessProbe:
            tcpSocket:
              port: 9092
          volumeMounts:
            - {name: data,    mountPath: /var/lib/kafka }
            - {name: tmp,    mountPath: /tmp }
            - {name: vartmp, mountPath: /var/tmp }
        - name: "jmxtrans"
          image: "jmxtrans/jmxtrans"
          command: ["/boot.sh"]
          env:
          - { name: "POD_NAME",                  valueFrom: { fieldRef: { fieldPath: "metadata.name"                        }}}
          - { name: "HOST_NAME",                 valueFrom: { fieldRef: { fieldPath: "spec.nodeName"                        }}}
          - { name: "KAFKA_JMX_PORT",            value: "9010"                                                                }
          - { name: "INFLUXDB_DATABASE",         value: "kafka"                                                               }
          - { name: "INFLUXDB_HOST",             value: "http://influxdb:8086"                                                     }
          - { name: "INFLUXDB_USER",             value: "user"                                                              }
          - { name: "INFLUXDB_PASSWORD",         valueFrom: { secretKeyRef: { name: influxdb-secret, key: user-password     }}}
          volumeMounts:
            - name: jmxtrans-input
              mountPath: /var/lib/jmxtrans
              readOnly: true
            - name: kafka-jmxtrans-config
              mountPath: /boot.sh
              subPath: boot.sh
              readOnly: true
      volumes:
        - { name: tmp,    emptyDir: {} }
        - { name: vartmp, emptyDir: {} }
        - { name: data, emptyDir: {} }
        - { name: jmxtrans-input,   emptyDir: {} }
        - { name: kafka-jmxtrans-config, configMap: { name: kafka-jmxtrans-config, defaultMode: 0744 } }